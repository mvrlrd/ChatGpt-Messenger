[versions]
accompanistNavigationAnimation = "0.35.1-alpha"
androidxJunit = "1.2.1"
androidxJunitVersion = "1.1.5"
appcompat = "1.7.0"
coreKtx = "1.13.1"
junit = "1.2.1"
kotlinStdlib = "1.9.24"
kotlinTest = "1.9.10"
kotlinxCoroutinesCore = "1.7.3"
kotlinxSerializationJson = "1.6.3"
lifecycleRuntime = "2.8.4"
activityCompose = "1.9.1"
composeVersion = "1.6.8"
material = "1.12.0"
material3Version = "1.2.1"
junitVersion = "4.13.2"
espressoCoreVersion = "3.6.1"
materialVersion = "1.12.0"
mockitoCore = "5.3.1"
mockitoCoreVersion = "2.8.47"
mockitoKotlin = "5.1.0"
retrofit = "2.9.0"
roomKtx = "2.6.1"
uiTestJunit4 = "1.7.2"
uiTestJUnit4Version = "1.6.8"
composeBom = "2024.08.00"
lifecycleViewmodelCompose = "2.8.4"
runtimeLivedata = "1.6.8"
navComposeVersion = "2.7.7"
dagger = "2.48"
kotlin = "1.9.0"
ksp = "1.9.0-1.0.12"


retrofit2ConverterScalars = "2.9.0"
retrofit2KotlinxSerializationConverter = "1.0.0"
okhttp = "4.12.0"
okhttpLoggingInterceptor = "4.11.0"

mat= "1.0.0"

accompanistVersion = "0.32.0"







[libraries]
accompanistNavigationAnimation = { module = "com.google.accompanist:accompanist-navigation-animation", version.ref = "accompanistNavigationAnimation" }
appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
coreKtx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }
googleMaterial = { module = "com.google.android.material:material", version.ref = "material" }

material = { module = "androidx.compose.material:material", version.ref = "materialVersion" }

#junit testing
junitExt = { module = "androidx.test.ext:junit", version.ref = "junit" }
junit = { module = "junit:junit", version.ref = "junitVersion" }

kotlinStdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlinStdlib" }
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlinTest" }
kotlinxCoroutinesCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutinesCore" }
kotlinxCoroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinxCoroutinesCore" }
kotlinxSerializationJson = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerializationJson" }

lifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycleRuntime" }



#retrofit

mockitoCore = { module = "org.mockito:mockito-core", version.ref = "mockitoCore" }
mockitoCoreV2847 = { module = "org.mockito:mockito-core", version.ref = "mockitoCoreVersion" }
mockitoKotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockitoKotlin" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit2ConverterScalars = { module = "com.squareup.retrofit2:converter-scalars", version.ref = "retrofit2ConverterScalars" }
retrofit2KotlinxSerializationConverter = { module = "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter", version.ref = "retrofit2KotlinxSerializationConverter" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttpLoggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttpLoggingInterceptor" }

#room
roomKtx = { module = "androidx.room:room-ktx", version.ref = "roomKtx" }
roomRuntime = { module = "androidx.room:room-runtime", version.ref = "roomKtx" }
androidxRoomCompiler = { module = "androidx.room:room-compiler", version.ref = "roomKtx" }

#compose
composeUiTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "composeVersion" }
composeUiTestManifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "composeVersion" }
composeUiToolingPreview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "composeVersion" }

# Core Compose UI dependencies
composeUi = { module = "androidx.compose.ui:ui", version.ref = "composeVersion" }
composeUiGraphics = { module = "androidx.compose.ui:ui-graphics", version.ref = "composeVersion" }

foundation = { module = "androidx.compose.foundation:foundation", version.ref = "composeVersion" }

# Material Design components
material3 = { module = "androidx.compose.material3:material3", version.ref = "material3Version" }
material3IconsCore = { module = "androidx.compose.material3:material3-icons-core", version.ref = "mat" }
material3IconsExtended = { module = "androidx.compose.material3:material3-icons-extended", version.ref = "mat" }

accompanistSwipeRefresh = { module = "com.google.accompanist:accompanist-swiperefresh", version.ref = "accompanistVersion" }


# Lifecycle and state management
viewModelCompose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycleViewmodelCompose" }
runtimeLivedata = { module = "androidx.compose.runtime:runtime-livedata", version.ref = "runtimeLivedata" }

# Compose integration with Activities and BOM
activityCompose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }
composeBom = { module = "androidx.compose:compose-bom", version.ref = "composeBom" }

# Compose runtime
runtime = { module = "androidx.compose.runtime:runtime", version.ref = "composeVersion" }

#compose_navigation
navigationCompose = { module = "androidx.navigation:navigation-compose", version.ref = "navComposeVersion" }




#ui_testing
espressoCore = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCoreVersion" }
uiTest = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "composeVersion" }

dagger = { module = "com.google.dagger:dagger", version.ref = "dagger" }
daggerCompiler = { module = "com.google.dagger:dagger-compiler", version.ref = "dagger" }

[bundles]

testDependencies = ["junit", "espressoCore", "junitExt", "uiTest"]

roomDeps = ["roomKtx", "roomRuntime"]
retrofitDeps = ["retrofit","retrofit2ConverterScalars","retrofit2KotlinxSerializationConverter","okhttp", "okhttpLoggingInterceptor"]

# UI Bundle - For basic Compose UI components
composeUiBundle = [
    "composeUi",
    "composeUiGraphics",
    "composeUiToolingPreview",
    "foundation"
]

# Lifecycle Bundle - For managing UI lifecycle and state
composeLifecycleBundle = [
    "viewModelCompose",
    "runtimeLivedata"
]

# Integration Bundle - For integrating Compose with activities and BOM management
composeIntegrationBundle = [
    "activityCompose",
    "composeBom"
]

# Runtime Bundle - For core runtime dependencies
composeRuntimeBundle = [
    "runtime"
]

debugComposeBudle = ["composeUiTooling", "composeUiTestManifest"]